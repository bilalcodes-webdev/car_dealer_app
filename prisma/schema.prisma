// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String             @id @default(uuid())
  clerkUserId String             @unique
  email       String             @unique
  name        String?
  imageUrl    String?
  phone       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  role        userRole           @default(USER)
  saveCars    UserSaveCar[]
  testDrives  TestDriveBooking[]
}

model Car {
  id                String             @id @default(uuid())
  make              String
  model             String
  year              Int
  price             Decimal            @db.Decimal(10, 2)
  mileage           String
  color             String
  fuelType          String
  transmission      String
  bodyType          String
  seats             Int?
  description       String
  status            CarStatus          @default(AVAILABLE)
  featured          Boolean
  image             String[]
  savedBy           UserSaveCar[]
  testDriveBookings TestDriveBooking[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([make, model])
  @@index([bodyType])
  @@index([price])
  @@index([year])
  @@index([status])
  @@index([fuelType])
  @@index([featured])
}

model DealerShipInfo {
  id           String         @id @default(uuid())
  name         String         @default("Vehical Motors")
  address      String         @default("69 Car Street, Autoville, CA 69420")
  phone        String         @default("92 3472601202")
  email        String         @default("bilalhassan56602@gmail.com")
  workingHours WorkingHours[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model WorkingHours {
  id           String         @id @default(uuid())
  dealerShipId String
  dealerShip   DealerShipInfo @relation(fields: [dealerShipId], references: [id], onDelete: Cascade)
  dayOfWeek    DayOfWeek
  openTime     String
  closeTime    String
  isOpen       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([dealerShipId, dayOfWeek])
  @@index([dealerShipId])
  @@index([dayOfWeek])
  @@index([isOpen])
}

model UserSaveCar {
  id      String   @id @default(uuid())
  userId  String
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  carId   String?
  car     Car?     @relation(fields: [carId], references: [id], onDelete: Cascade)
  savedAt DateTime @default(now())

  @@unique([userId, carId])
  @@index([userId])
  @@index([carId])
}

model TestDriveBooking {
  id          String        @id @default(uuid())
  userId      String
  carId       String?
  Car         Car?          @relation(fields: [carId], references: [id])
  User        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingDate DateTime      @db.Date
  startTime   String
  endTime     String
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([carId])
  @@index([userId])
  @@index([bookingDate])
  @@index([status])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
  NO_SHOW
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum CarStatus {
  AVAILABLE
  UNAVAILABLE
  SOLD
}

enum userRole {
  USER
  ADMIN
}
